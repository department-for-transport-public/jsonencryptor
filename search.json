[{"path":"https://department-for-transport-public.github.io/jsonencryptor/articles/using_jsonencryptor_for_gcp.html","id":"using-service-accounts-for-r-gcp-connectivity","dir":"Articles","previous_headings":"","what":"Using service accounts for R-GCP connectivity","title":"using_jsonencryptor_for_gcp","text":"Service accounts alternative personal authentication tokens connecting Google Cloud Platform (GCP) services. Rather running user account, service accounts created GCP administrator used authenticate R session. useful running R scripts don’t want authenticate interactively; either ’re running something like Rmarkdown Shiny, simply ’s annoying every hour!","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/articles/using_jsonencryptor_for_gcp.html","id":"creating-a-service-account","dir":"Articles","previous_headings":"","what":"Creating a service account","title":"using_jsonencryptor_for_gcp","text":"can download service account key GCP JSON format. unencrypted key can used authenticate R session. However, ’s good idea store key plain text, easily stolen. Instead, can use jsonencryptor package encrypt key can unencrypted password set .","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/articles/using_jsonencryptor_for_gcp.html","id":"creating-and-storing-a-password","dir":"Articles","previous_headings":"","what":"Creating and storing a password","title":"using_jsonencryptor_for_gcp","text":"First, need install jsonencryptor package Github: first step, set password service account key. password used encrypt decrypt key. can create password using secret_pw_gen() function, produces random, hard--guess password specified length: password secret never stored code. Instead, can save .Renviron file home directory. file used store environment variables loaded R starts, available accidentally push Github, anyone else access. can add line like .Renviron file: Make sure include extra line end file ensure last line read R, restart R. can check password accessible R session using Sys.getenv() function:","code":"install.packages(\"remotes\") remotes::install_github(\"department-for-transport-public/jsonencryptor\") secret_pw_gen() GARGLE_PASSWORD = \"your_password_here\" Sys.getenv(\"GARGLE_PASSWORD\")"},{"path":"https://department-for-transport-public.github.io/jsonencryptor/articles/using_jsonencryptor_for_gcp.html","id":"encrypting-your-service-account-key","dir":"Articles","previous_headings":"","what":"Encrypting your service account key","title":"using_jsonencryptor_for_gcp","text":"password set , can use secret_write() function encrypt service account key. function takes path service account key name ’d like call encrypted key arguments. example, service account key called “service_account_key.json”, can encrypt using following code: create new file called “encrypted_key.json”, stored inside inst/secret directory. file encrypted can decrypted using password set earlier. point, ensure delete original service account key, longer needed represents security risk accidentally shared","code":"secret_write(\"service_account_key.json\", \"encryped_key.json\")"},{"path":"https://department-for-transport-public.github.io/jsonencryptor/articles/using_jsonencryptor_for_gcp.html","id":"using-your-encrypted-key","dir":"Articles","previous_headings":"","what":"Using your encrypted key","title":"using_jsonencryptor_for_gcp","text":"use encrypted key, can use secret_read() function. function takes name encrypted key argument, returns contents decrypted key ready use authenticate R session. example, can use following code read encrypted key: ’s need specify encrypted key stored inside inst/secret directory, secret_read() function knows look.","code":"secret_read(\"encrypted_key.json\")"},{"path":[]},{"path":"https://department-for-transport-public.github.io/jsonencryptor/articles/using_jsonencryptor_for_gcp.html","id":"bigquery","dir":"Articles","previous_headings":"Using your key to access GCP services","what":"BigQuery","title":"using_jsonencryptor_for_gcp","text":"using encrypted key, easiest secure way pass key directly gargle::gargle_oauth() function, used authenticate R session GCP services. example, can use following code authenticate R session bigrquery package: authenticate session, error message means completed successfully. can now use bigrquery package query GCP data. example:","code":"library(bigrquery) bq_auth(path = secret_read(\"encrypted_key.json\")) con <- dbConnect(   bigrquery::bigquery(),   project = \"your_project_id\",   dataset = \"your_dataset\" )  dbListTables(con)"},{"path":"https://department-for-transport-public.github.io/jsonencryptor/articles/using_jsonencryptor_for_gcp.html","id":"google-cloud-storage","dir":"Articles","previous_headings":"Using your key to access GCP services","what":"Google cloud storage","title":"using_jsonencryptor_for_gcp","text":"can also use encrypted key access Google Cloud Storage. example, can use gcs_auth() function googleCloudStorageR package authenticate R session: authenticate session, error message means completed successfully. can now use googleCloudStorageR package access GCP storage. example:","code":"library(googleCloudStorageR) gcs_auth(token = secret_read(\"encrypted_key.json\")) gcs_list_buckets()"},{"path":"https://department-for-transport-public.github.io/jsonencryptor/articles/using_jsonencryptor_for_gcp.html","id":"error-handling","dir":"Articles","previous_headings":"","what":"Error handling","title":"using_jsonencryptor_for_gcp","text":"get error message trying authenticate session, ’s likely key failing decrypt. password incorrect, providing wrong path location function. either case, get similar error look like : Despite error says, rarely caused missing permissions service account. Check service key exists inst/secret directory, password correct. ’re still trouble, can try re-encrypting key using secret_write() function, re-authenticating session. permissions errors, likely service account missing specified permissions. can check going GCP console, checking permissions service account.","code":"Access Denied: Dataset your-project-name:your-dataset: Permission bigquery.tables.list denied   on dataset your-project-name:your-dataset (or it may not exist)"},{"path":"https://department-for-transport-public.github.io/jsonencryptor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Francesca Bryden. Author, maintainer.","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bryden F (2024). jsonencryptor: Secure Encryption json service token keys. R package version 0.1.2, https://department--transport-public.github.io/jsonencryptor/.","code":"@Manual{,   title = {jsonencryptor: Secure Encryption of json service token keys},   author = {Francesca Bryden},   year = {2024},   note = {R package version 0.1.2},   url = {https://department-for-transport-public.github.io/jsonencryptor/}, }"},{"path":"https://department-for-transport-public.github.io/jsonencryptor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Secure Encryption of json service token keys","text":"install package directly github run: remotes::install_github(\"department--transport-public/jsonencryptor\")","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/index.html","id":"generating-a-secure-password","dir":"","previous_headings":"","what":"Generating a secure password","title":"Secure Encryption of json service token keys","text":"can either create password get package generate , using secret_pw_gen() function. use password development Cloud R use encrypt json file, assign local variable Sys.setenv(\"GARGLE_PASSWORD\" = your_password). use rsconnect, navigate dashboard publisher permissions , select vars tab. Create new variable name GARGLE_PASSWORD value password, making sure don’t use quotation marks either.","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/index.html","id":"encrypting-a-json-key-with-your-password","dir":"","previous_headings":"","what":"Encrypting a json key with your password","title":"Secure Encryption of json service token keys","text":"generated password saved local variable, can encrypt saved json service key token. Use secret_write() function , passing three arguments: name encrypted output file. function always save folder called inst/secret. filepath input unencrypted json file. (Optional) dir (directory) want write . default working directory, can change particularly working shiny apps (working directory inside folder structure). service key token fully encrypted fine treat like text object (e.g. can upload Github publish rsconnect).","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/index.html","id":"unencrypting-your-json-key-to-use-it","dir":"","previous_headings":"","what":"Unencrypting your json key to use it","title":"Secure Encryption of json service token keys","text":"unencrypt json key, use secret_read() function, passing file name encrypted json key inside inst/secret folder. function can used directly inside gargle function authenticate access big query e.g.: bq_auth(path = secret_read(\"my_access_token.json\")) similar googleCloudStorageR function authenticate access GCS: gcs_auth(secret_read(\"my_access_token.json\")) locally rsconnect need set password variable work.","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/reference/secret_pw_gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a very secure random password — secret_pw_gen","title":"Create a very secure random password — secret_pw_gen","text":"Create secure random password","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/reference/secret_pw_gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a very secure random password — secret_pw_gen","text":"","code":"secret_pw_gen()"},{"path":"https://department-for-transport-public.github.io/jsonencryptor/reference/secret_pw_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract password in raw format from an environment object — secret_pw_get","title":"Extract password in raw format from an environment object — secret_pw_get","text":"Extract password raw format environment object","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/reference/secret_pw_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract password in raw format from an environment object — secret_pw_get","text":"","code":"secret_pw_get(env_name)"},{"path":"https://department-for-transport-public.github.io/jsonencryptor/reference/secret_pw_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract password in raw format from an environment object — secret_pw_get","text":"env_name Name password variable either local environment rsconnect. Passed string.","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/reference/secret_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in password protected json file from the folder inst/secret — secret_read","title":"Read in password protected json file from the folder inst/secret — secret_read","text":"Read password protected json file folder inst/secret","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/reference/secret_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in password protected json file from the folder inst/secret — secret_read","text":"","code":"secret_read(path)"},{"path":"https://department-for-transport-public.github.io/jsonencryptor/reference/secret_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in password protected json file from the folder inst/secret — secret_read","text":"path File name encrypted json key","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/reference/secret_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write out password protected json file to the folder inst/secret — secret_write","title":"Write out password protected json file to the folder inst/secret — secret_write","text":"Write password protected json file folder inst/secret","code":""},{"path":"https://department-for-transport-public.github.io/jsonencryptor/reference/secret_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write out password protected json file to the folder inst/secret — secret_write","text":"","code":"secret_write(name, input, dir = getwd())"},{"path":"https://department-for-transport-public.github.io/jsonencryptor/reference/secret_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write out password protected json file to the folder inst/secret — secret_write","text":"input File name original unencrypted json key dir Location save inst/secret folder . Defaults current working directory path File name encrypted json key","code":""}]
